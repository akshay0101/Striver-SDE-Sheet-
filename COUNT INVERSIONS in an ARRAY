int merge(long long arr[],int temp[],int l,int mid,int r){
        long long i,j,k;
        int cnt=0;
        i=l;
        j=mid;
        k=l;
        while((i<=mid-1)&&j<=r){
            if(arr[i]<arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                cnt+=mid-i;
            }
        }
        while(i<=mid-1){
            temp[k++]=arr[i++];
        }
        while(j<=r){
            temp[k++]=arr[j++];
        }
        for(i=l;i<=r;i++){
            arr[i]=temp[i];
        }
        return cnt;
    }
    int mergesort(long long arr[],int temp[],long long l,long long r){
        int cnt=0;
        if(l<r){
        int mid=(l+r)/2;
         cnt+=mergesort(arr,temp,0,mid);
         cnt+=mergesort(arr,temp,mid+1,r);
         cnt+=merge(arr,temp,l,mid+1,r);
        }
        return cnt;
    }
    long long int inversionCount(long long arr[], long long N)
    {
         int temp[N];
         long long int ans=mergesort(arr,temp,0,N-1);
         return ans;
    }
